buildscript {
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
		classpath "io.spring.gradle:dependency-management-plugin:$springDependencyManagementVersion"
	}
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
	"integration-test" { sourceSet ->
		['java', 'groovy', 'resources'].each {
			if (!sourceSet.hasProperty(it)) return
			sourceSet."$it".srcDir file("src/integration-test/${it}")
		}
	}
}

processResources {
	filesMatching('application.properties') {
		filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
			'info.app.version': (project.property('version') + '-' + git.head().abbreviatedId).toString()
		]
	}
}

dependencies {
	compile project (':crystal-ball')

	compile ('org.springframework.boot:spring-boot-starter-aop')
	compile ('org.springframework.boot:spring-boot-starter-jdbc')
	compile ('org.springframework.boot:spring-boot-starter-cache')
	compile ('org.springframework.boot:spring-boot-starter-web')
	compile ('org.springframework.boot:spring-boot-starter-thymeleaf') {
		exclude group: 'org.codehaus.groovy'
	}
	compile ('org.springframework.boot:spring-boot-starter-logging')
	compile ('org.springframework.boot:spring-boot-starter-actuator')
	compile ("com.google.guava:guava:$guavaVersion")
	compile ("com.github.ben-manes.caffeine:caffeine:$caffeineVersion")
	compile ("org.postgresql:postgresql:$postgresqlJdbcVersion")
//	compile ("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
//	compile ("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
//	compile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
	compile ("org.webjars:bootstrap:$bootstrapVersion")
	compile ("org.webjars:jquery:$jQueryVersion")
	compile ("org.webjars:jquery-ui:$jQueryUIVersion")
	compile ("org.webjars:jquery-ui-themes:$jQueryUIVersion")
	compile ("org.webjars.bower:jquery-bootgrid:$jQueryBootgridVersion") {
		exclude group: 'org.webjars.bower'
	}
	compile ("com.maxmind.geoip2:geoip2:$geoip2Version") {
		exclude group: 'com.google.http-client'
	}
	compile files ('lib/GeoLite2-Country.zip')

	testCompile ('org.springframework.boot:spring-boot-starter-test')
	testCompile ("junit:junit:$junitVersion")
	testCompile ("org.assertj:assertj-core:$assertjCoreVersion")
	testCompile ("org.mockito:mockito-core:$mockitoAllVersion")
	testCompile ("org.testng:testng:$testngVersion")

	integrationTestCompile sourceSets.main.output
	integrationTestCompile sourceSets.test.output
	integrationTestCompile configurations.testCompile
	integrationTestRuntime configurations.testRuntime
}

task integrationTest(type: Test) {
	testClassesDir = sourceSets."integration-test".output.classesDir
	classpath = sourceSets."integration-test".runtimeClasspath
}

task quickDeployToOpenShift << {
	def version = project.property('version')
	def tennisStatsJar = "tennis-stats-${version}.jar"
	def srcPath = 'build/libs'
	def destPath = "app-root/data/tennis-stats/lib"
	ssh.run {
		session(remotes.openShift) {
			put from: "${srcPath}/${tennisStatsJar}.original", into: destPath
			execute 'gear stop'
			execute 'rm -rf app-root/logs/*'
			execute "mv -f ${destPath}/${tennisStatsJar}.original ${destPath}/${tennisStatsJar}"
			execute 'gear start'
		}
	}
}

task fullDeployToOpenShift << {
	def version = project.property('version')
	def tennisStats = "tennis-stats-${version}"
	def tennisStatsDist = "${tennisStats}.tar"
	def srcPath = 'build/distributions'
	def destPath = 'app-root/data'
	ssh.run {
		session(remotes.openShift) {
			put from: "${srcPath}/${tennisStatsDist}", into: destPath
			execute "cd ${destPath}; tar -xvf ${tennisStatsDist}; rm ${tennisStatsDist}"
			execute 'gear stop'
			execute "rm -rf ${destPath}/tennis-stats app-root/logs/*"
			execute "cd ${destPath}; mv ${tennisStats} tennis-stats"
			execute 'gear start'
		}
	}
}

task checkHealthAtOpenShift << {
	def health = new groovy.json.JsonSlurper().parse(new URL('http://tennis-strangeforest.rhcloud.com/manage/health'))
	println "Ultimate Tennis Statistics is ${health.status}"
	println "Disk usage: ${health.quota.blocks.pctUsed}"
}


task infoAtOpenShift << {
	def info = new groovy.json.JsonSlurper().parse(new URL('http://tennis-strangeforest.rhcloud.com/manage/info'))
	println "Ultimate Tennis Statistics: ${info.app.version}"
	println "DB size: ${info.db.size}"
	println "Visitors: ${info.visitors}"
}