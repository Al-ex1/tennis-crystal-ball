buildscript {
	ext {
		springBootVersion = '1.3.3.RELEASE'
	}
	dependencies {
		classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
		classpath 'io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE'
		classpath 'org.hidetake:gradle-ssh-plugin:2.0.0'
	}
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'
apply plugin: 'org.hidetake.ssh'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
	integrationTest { sourceSet ->
		['java', 'groovy', 'resources'].each {
			if (!sourceSet.hasProperty(it)) return
			sourceSet."$it".srcDir file("src/integration-test/${it}")
		}
	}
}

processResources {
	filesMatching('application.properties') {
		filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
			'info.app.version': project.property('version') + '-' + git.head().abbreviatedId
		]
	}
}

dependencies {
	compile project(':crystal-ball')
	compile ('org.springframework.boot:spring-boot-starter-aop')
	compile ('org.springframework.boot:spring-boot-starter-jdbc')
	compile ('org.springframework.boot:spring-boot-starter-web')
	compile ('org.springframework.boot:spring-boot-starter-thymeleaf') {
		exclude group: 'org.codehaus.groovy'
	}
	compile ('org.springframework.boot:spring-boot-starter-logging')
	compile ('org.springframework.boot:spring-boot-starter-actuator')
	def sprigVersion = '4.2.5.RELEASE'
	compile ('org.springframework:spring-context-support:' + sprigVersion)
	compile ('com.google.guava:guava:19.0')
	compile ('org.postgresql:postgresql:9.4.1208')
	def jacksonVersion = '2.7.3'
	compile ("com.fasterxml.jackson.core:jackson-core:$jacksonVersion")
	compile ("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
	compile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
	compile ('org.webjars:bootstrap:3.3.6')
	compile ('org.webjars:jquery:2.2.3')
	def jQueryUIVersion = '1.11.4'
	compile ('org.webjars:jquery-ui:' + jQueryUIVersion)
	compile ('org.webjars:jquery-ui-themes:' + jQueryUIVersion)
	compile ('org.webjars.bower:jquery-bootgrid:1.3.1') {
		exclude group: 'org.webjars.bower'
	}
	compile ('com.maxmind.geoip2:geoip2:2.6.0') {
		exclude group: 'com.google.http-client'
	}
	compile files('lib/GeoLite2-Country.zip')
	testCompile ('junit:junit:4.12')
	testCompile ('org.assertj:assertj-core:3.4.1')
	testCompile ('org.mockito:mockito-all:1.10.19')
	testCompile ('org.springframework:spring-test:' + sprigVersion)
	integrationTestCompile sourceSets.main.output
	integrationTestCompile sourceSets.test.output
	integrationTestCompile configurations.testCompile
	integrationTestRuntime configurations.testRuntime
}

task integrationTest(type: Test) {
	testClassesDir = sourceSets.integrationTest.output.classesDir
	classpath = sourceSets.integrationTest.runtimeClasspath
}

remotes {
	def home = System.properties['user.home']
	openShift {
		host = 'tennis-strangeforest.rhcloud.com'
		user = '5637dc3a0c1e6656ae0001b2'
		identity = file("${home}/.ssh/id_rsa")
	}
}

task quickDeployToOpenShift << {
	def version = project.property('version')
	def tennisStats = "tennis-stats-${version}"
	def tennisStatsJar = "${tennisStats}.jar"
	def srcPath = 'build/libs'
	def destPath = "app-root/data/${tennisStats}/lib"
	ssh.run {
		session(remotes.openShift) {
			put "${srcPath}/${tennisStatsJar}.original", destPath
			execute 'gear stop'
			execute 'rm -rf app-root/logs/*'
			execute "mv -f ${destPath}/${tennisStatsJar}.original ${destPath}/${tennisStatsJar}"
			execute 'gear start'
		}
	}
}

task fullDeployToOpenShift << {
	def version = project.property('version')
	def tennisStats = "tennis-stats-${version}"
	def tennisStatsDist = "${tennisStats}.tar"
	def srcPath = 'build/distributions'
	def destPath = 'app-root/data'
	ssh.run {
		session(remotes.openShift) {
			put "${srcPath}/${tennisStatsDist}", destPath
			execute 'gear stop'
			execute "rm -rf ${destPath}/${tennisStats}"
			execute 'rm -rf app-root/logs/*'
			execute "cd ${destPath}; tar -xvf ${tennisStatsDist}"
			execute "rm ${destPath}/${tennisStatsDist}"
			execute 'gear start'
		}
	}
}

task checkHealthAtOpenShift << {
	def health = new groovy.json.JsonSlurper().parse(new URL('http://tennis-strangeforest.rhcloud.com/manage/health'))
	println "Ultimate Tennis Statistics is ${health.status}."
}