plugins {
	id 'org.hidetake.ssh'
	id 'com.github.ben-manes.versions'
	id 'org.standardout.versioneye'
	id 'org.sonarqube'
}

allprojects {
	version = "$projectVersion"

	repositories {
		mavenCentral()
	}
}

subprojects {

	apply plugin: 'java'

	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11

	remotes {
		def home = System.properties['user.home']
		digitalOcean {
			host = '46.101.166.59'
			user = 'root'
			identity = file("${home}/.ssh/id_rsa")
		}
		utsTest {
			host = '192.168.0.200'
			user = 'root'
			password = 'Chicker5'
		}
	}

	dependencies {
		implementation ("com.google.guava:guava:$guavaVersion") {
			exclude group: 'com.google.guava', module: 'listenablefuture'
			exclude group: 'com.google.guava', module: 'failureaccess'
			exclude group: 'com.google.j2objc'
			exclude group: 'com.google.code.findbugs'
			exclude group: 'com.google.errorprone'
			exclude group: 'org.codehaus.mojo'
			exclude group: 'org.checkerframework'
		}
		implementation ("org.postgresql:postgresql:$postgresqlJdbcVersion")
		testImplementation ("org.junit.jupiter:junit-jupiter-api:$junitVersion")
		testRuntimeOnly ("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
		testImplementation ("org.assertj:assertj-core:$assertjVersion")
	}
	
	test {
		useJUnitPlatform()
	}

	dependencyUpdates.resolutionStrategy {
		componentSelection { rules ->
			rules.all { ComponentSelection selection ->
				if (['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier -> selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/ })
					selection.reject('Release candidate')
			}
		}
	}
}

ext {
	releaseVersion = releaseVersion version
}

wrapper {
	gradleVersion = "$gradleVersion"
}

def static releaseVersion(version) {
	def SNAPSHOT_SUFFIX = '-SNAPSHOT'
	version.endsWith(SNAPSHOT_SUFFIX) ? version.substring(0, version.length() - SNAPSHOT_SUFFIX.length()) : version
}

versioneye {
	includeSubProjects = true
	dependencies = transitive
}

sonarqube {
	properties {
		property 'sonar.host.url', 'https://sonarcloud.io'
		property 'sonar.organization', 'mcekovic'
		property 'sonar.projectKey', 'mcekovic_tennis-crystal-ball'
		property 'sonar.login', '7abf868a380087cd2970435d6567cb0e410680bc'
	}
}