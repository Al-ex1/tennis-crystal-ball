buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath "com.github.ben-manes:gradle-versions-plugin:$gradleVersionsVersion"
		classpath "org.hidetake:gradle-ssh-plugin:$gradleSshVersion"
		classpath "org.standardout:gradle-versioneye-plugin:$gradleVersionEyeVersion"
	}
}

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'org.standardout.versioneye'

allprojects {
	version = "$projectVersion"

	buildscript {
		repositories {
			mavenCentral()
		}
	}

	repositories {
		mavenCentral()
	}
}

subprojects {

	apply plugin: 'java'
	apply plugin: 'org.hidetake.ssh'

	remotes {
		def home = System.properties['user.home']
		digitalOcean {
			host = '46.101.166.59'
			user = 'root'
			identity = file("${home}/.ssh/id_rsa")
		}
		utsTest {
			host = '192.168.0.200'
			user = 'root'
			password = 'Chicker5'
		}
	}

	dependencies {
		compile ("com.google.guava:guava:$guavaVersion") {
			exclude group: 'org.codehaus.mojo'
			exclude group: 'com.google.code.findbugs'
			exclude group: 'com.google.errorprone'
			exclude group: 'com.google.j2objc'
			exclude group: 'org.checkerframework'
		}
		compile ("org.postgresql:postgresql:$postgresqlJdbcVersion")
		testImplementation ("org.junit.jupiter:junit-jupiter-api:$junitVersion")
		testRuntimeOnly ("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
		testCompile ("org.assertj:assertj-core:$assertjVersion")
	}
	
	test {
		useJUnitPlatform()
	}

	dependencyUpdates.resolutionStrategy {
		componentSelection { rules ->
			rules.all { ComponentSelection selection ->
				if (['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier -> selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/ })
					selection.reject('Release candidate')
			}
		}
	}
}

ext {
	releaseVersion = releaseVersion version
}

wrapper {
	gradleVersion = "$gradleVersion"
}

def static releaseVersion(version) {
	def SNAPSHOT_SUFFIX = '-SNAPSHOT'
	version.endsWith(SNAPSHOT_SUFFIX) ? version.substring(0, version.length() - SNAPSHOT_SUFFIX.length()) : version
}

versioneye {
	includeSubProjects = true
	dependencies = transitive
}