apply plugin: 'groovy'
apply plugin: 'application'

mainClassName = 'org.strangeforest.tcb.dataload.Main'
applicationDefaultJvmArgs = [
	'-Xmx128m',
	'-Dtcb.db.connections=5',
	'-Dtcb.db.username=adminbnga3sx',
	'-Dtcb.db.password=I1KZe338nRAX',
	'-Dtcb.db.url=jdbc:postgresql://127.2.254.130:5432/tennis?prepareThreshold=0'
]

sourceSets.main.resources.srcDirs = ['src/main/resources', 'src/main/db']

dependencies {
	compile project(':crystal-ball')
	compile project(':tennis-stats')
	compile ("org.codehaus.groovy:groovy-all:$groovyVersion")
	compile ("com.xlson.groovycsv:groovycsv:$groovyCsvVersion")
	compile ("com.google.guava:guava:$guavaVersion")
	compile ("org.jsoup:jsoup:$jsoupVersion")
	runtime ("org.postgresql:postgresql:$postgresqlJdbcVersion")
	compile ("org.springframework:spring-jdbc:$springJdbcVersion")
	compile ("commons-cli:commons-cli:$commonsCliVersion")
	testCompile ("junit:junit:$junitVersion")
}

configurations {
	compile.exclude group: 'org.springframework.boot'
	compile.exclude group: 'com.github.ben-manes.caffeine'
	compile.exclude group: 'org.webjars'
	compile.exclude group: 'org.webjars.bower'
	compile.exclude group: 'com.maxmind.geoip2'
	compile.exclude group: 'eu.bitwalker'
}

task quickDeployToOpenShift {
	doLast {
		def version = project.property('version')
		def dataLoadJar = "data-load-${version}.jar"
		def crystalBallJar = "crystal-ball-${version}.jar"
		def tennisStatsJar = "tennis-stats-${version}.jar"
		def srcPath = 'build/libs'
		def destPath = "app-root/data/data-load/lib"
		ssh.run {
			session(remotes.openShift) {
				put from: "${srcPath}/${dataLoadJar}", into: "${destPath}/${dataLoadJar}.new"
				put from: "../crystal-ball/${srcPath}/${crystalBallJar}", into: "${destPath}/${crystalBallJar}.new"
				put from: "../tennis-stats/${srcPath}/${tennisStatsJar}", into: "${destPath}/${tennisStatsJar}.new"
				execute "mv -f ${destPath}/${dataLoadJar}.new ${destPath}/${dataLoadJar}"
				execute "mv -f ${destPath}/${crystalBallJar}.new ${destPath}/${crystalBallJar}"
				execute "mv -f ${destPath}/${tennisStatsJar}.new ${destPath}/${tennisStatsJar}"
			}
		}
	}
}

task fullDeployToOpenShift {
	doLast {
		def version = project.property('version')
		def dataLoad = "data-load-${version}"
		def dataLoadDist = "${dataLoad}.tar"
		def srcPath = 'build/distributions'
		def destPath = 'app-root/data'
		ssh.run {
			session(remotes.openShift) {
				execute "rm -rf ${destPath}/data-load"
				put from: "${srcPath}/${dataLoadDist}", into: destPath
				execute "cd ${destPath}; tar -xvf ${dataLoadDist}; rm ${dataLoadDist}; mv ${dataLoad} data-load"
			}
		}
	}
}